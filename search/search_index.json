{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Guide and instructions for setting up the Numberly SDK for iOS apps Before continuing The SDK is compatible with iOS 10.0 and higher Xcode 12+ is required 1. Install the SDK \u00b6 CocoaPods Manually target 'MyApp' do pod 'Numberly' end Warning Please make sure that your CocoaPods version is 1.10 or higher. Download latest SDK version After unarchiving the downloaded .zip file, include the Numberly.xcframework in your project by dragging and dropping it into the left panel. Make sure you check the Copy items if needed box. Be sure Numberly.xcframework is in Link Binary with Libraries section in the Build Phases of your application target. Be sure that Enable Modules and Link Frameworks Automatically are enabled in the target Build Settings . Be sure that Embed & Signed is selected for Numberly.framework in General , Frameworks, Librairies and Embedded Content . Important Download the numberly-sdk-ios-x.x.x.zip not the source code zip. 2. Create and add the configuration file \u00b6 Open the project .xcworkspace and create a Numberly.plist file. Make sure that it's included to your application\u2019s target. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version= \"1.0\" > <dict> <key> app_key </key> <string> the app key provided by numberly </string> <key> automatic_integration </key> <true/> <key> automatic_notification_registration </key> <true/> </dict> </plist> Options \u00b6 You can customize the configuration with the following properties: Key Type Required Default Description app_key String The app key provided by Numberly. automatic_integration Boolean true If enabled, Numberly will automatically intercepts incoming notifications. automatic_notification_registration Boolean true If enabled, Numberly will automatically registers for remote notification on starting. 3. Enable push capabilities \u00b6 Add the Push Notification capability to your project by following this guide . 4. Start the SDK \u00b6 Here we are! Now you can simply start Numberly in the AppDelegate's application:didFinishLaunchingWithOptions: method: Swift Objective-C import Numberly func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) -> Bool { Numberly . start () ... } @import Numberly ; - ( BOOL ) application: ( UIApplication * ) application didFinishLaunchingWithOptions :( NSDictionary * ) launchOptions { [ Numberly start ]; ... } Troubleshooting \u00b6 If you want to validate your implementation you can active the Numberly logs: Swift Objective-C Numberly . logLevel = . debug Numberly . logLevel = NBLLogLevelDebug ; Tips It's highly recommended to disable logs on production.","title":"\ud83d\ude80 Getting Started"},{"location":"#1-install-the-sdk","text":"CocoaPods Manually target 'MyApp' do pod 'Numberly' end Warning Please make sure that your CocoaPods version is 1.10 or higher. Download latest SDK version After unarchiving the downloaded .zip file, include the Numberly.xcframework in your project by dragging and dropping it into the left panel. Make sure you check the Copy items if needed box. Be sure Numberly.xcframework is in Link Binary with Libraries section in the Build Phases of your application target. Be sure that Enable Modules and Link Frameworks Automatically are enabled in the target Build Settings . Be sure that Embed & Signed is selected for Numberly.framework in General , Frameworks, Librairies and Embedded Content . Important Download the numberly-sdk-ios-x.x.x.zip not the source code zip.","title":"1. Install the SDK"},{"location":"#2-create-and-add-the-configuration-file","text":"Open the project .xcworkspace and create a Numberly.plist file. Make sure that it's included to your application\u2019s target. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version= \"1.0\" > <dict> <key> app_key </key> <string> the app key provided by numberly </string> <key> automatic_integration </key> <true/> <key> automatic_notification_registration </key> <true/> </dict> </plist>","title":"2. Create and add the configuration file"},{"location":"#options","text":"You can customize the configuration with the following properties: Key Type Required Default Description app_key String The app key provided by Numberly. automatic_integration Boolean true If enabled, Numberly will automatically intercepts incoming notifications. automatic_notification_registration Boolean true If enabled, Numberly will automatically registers for remote notification on starting.","title":"Options"},{"location":"#3-enable-push-capabilities","text":"Add the Push Notification capability to your project by following this guide .","title":"3. Enable push capabilities"},{"location":"#4-start-the-sdk","text":"Here we are! Now you can simply start Numberly in the AppDelegate's application:didFinishLaunchingWithOptions: method: Swift Objective-C import Numberly func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) -> Bool { Numberly . start () ... } @import Numberly ; - ( BOOL ) application: ( UIApplication * ) application didFinishLaunchingWithOptions :( NSDictionary * ) launchOptions { [ Numberly start ]; ... }","title":"4. Start the SDK"},{"location":"#troubleshooting","text":"If you want to validate your implementation you can active the Numberly logs: Swift Objective-C Numberly . logLevel = . debug Numberly . logLevel = NBLLogLevelDebug ; Tips It's highly recommended to disable logs on production.","title":"Troubleshooting"},{"location":"CHANGELOG/","text":"iOS SDK Changelog \u00b6 1.2.2 \u00b6 Released on 2022-04-05. Bug fix on offline support of tracking requests Technical maintenance and upgrades 1.2.0 \u00b6 Released on 2021-01-04. iOS 14 Support Merge NumberlyCore and NumberlyPush in a single Numberly framework. 1.1.0 \u00b6 Released on 2020-01-22. Initial version","title":"Release Notes"},{"location":"CHANGELOG/#ios-sdk-changelog","text":"","title":"iOS SDK Changelog"},{"location":"CHANGELOG/#122","text":"Released on 2022-04-05. Bug fix on offline support of tracking requests Technical maintenance and upgrades","title":"1.2.2"},{"location":"CHANGELOG/#120","text":"Released on 2021-01-04. iOS 14 Support Merge NumberlyCore and NumberlyPush in a single Numberly framework.","title":"1.2.0"},{"location":"CHANGELOG/#110","text":"Released on 2020-01-22. Initial version","title":"1.1.0"},{"location":"push-notifications/","text":"Push notifications \u00b6 Push notifications allow an app that isn\u2019t running in the foreground to notify the user when it has information for them. Push notifications originate from a notification server and are pushed to your app on a user\u2019s device. Setup Push Notifications \u00b6 By default, Numberly handles UIApplicationDelegate and UNUserNotificationCenterDelegate notifications related methods and forward them to your original delegate. You can disable this auto integration by setting the automatic_integration value to false in your Numberly.plist . If you do so, you will be in charge of implementing notification-related delegate methods . Enabling Push Notifications \u00b6 By default, Numberly will register for push notifications each time your app launches. You can disable this auto integration by setting the automatic_notification_registration value to false in your Numberly.plist . If you do so, you will be in charge of enabling push notifications in an other suitable moment in the user journey. Swift Objective-C Numberly . push . registerForRemoteNotifications ( options : [. alert , . sound , . badge ]) { ( granted ) in // } [ Numberly . push registerForRemoteNotifications : @[@( NBLPushAuthorizationOptionAlert ) , @( NBLPushAuthorizationOptionSound ) , @( NBLPushAuthorizationOptionBadge )] completionHandler : ^ ( BOOL granted ) { // }]; Tip Make sure to enable push notifications each time your app launches to keep the token up to date. Listening to push related events \u00b6 The Push module offers some great helpers and callbacks, you just need to set it's delegate which implements the PushDelegate protocol. Swift Objective-C Numberly . push . delegate = self Numberly . push . delegate = self ; Advanced integration \u00b6 Reset the badge number \u00b6 You can reset the badge number within your application by calling this method: Swift Objective-C Numberly . push . clearBadge () Numberly . push . delegate = self ; Handling notification-related delegates methods manually \u00b6 First set the UNUserNotificationCenter delegate: Swift Objective-C func application ( _ application : UIApplication , willFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { UNUserNotificationCenter . current (). delegate = self return true } - ( BOOL ) application: ( UIApplication * ) application willFinishLaunchingWithOptions :( NSDictionary * ) launchOptions { UNUserNotificationCenter . currentNotificationCenter . delegate = self ; return YES ; } Then, implement the delegates methods: Swift Objective-C func application ( _ application : UIApplication , didRegisterForRemoteNotificationsWithDeviceToken deviceToken : Data ) { Numberly . push . register ( token : deviceToken ) } func userNotificationCenter ( _ center : UNUserNotificationCenter , willPresent notification : UNNotification , withCompletionHandler completionHandler : @ escaping ( UNNotificationPresentationOptions ) -> Void ) { completionHandler ( Numberly . push . presentationOptions ( notification : notification )) } func userNotificationCenter ( _ center : UNUserNotificationCenter , didReceive response : UNNotificationResponse , withCompletionHandler completionHandler : @ escaping () -> Void ) { Numberly . push . handleNotification ( response : response ) completionHandler () } - ( void ) application: ( UIApplication * ) application didRegisterForRemoteNotificationsWithDeviceToken :( NSData * ) deviceToken { [ Numberly . push registerPushToken : deviceToken ]; } - ( void ) userNotificationCenter: ( UNUserNotificationCenter * ) center willPresentNotification :( UNNotification * ) notification withCompletionHandler :( void ( ^ )( UNNotificationPresentationOptions )) completionHandler { completionHandler ([ Numberly . push presentationOptionsForNotification : notification ]); } - ( void ) userNotificationCenter: ( UNUserNotificationCenter * ) center didReceiveNotificationResponse :( UNNotificationResponse * ) response withCompletionHandler :( void ( ^ )( void )) completionHandler { [ Numberly . push handleNotificationResponse : response ]; completionHandler (); }","title":"Push Notifications"},{"location":"push-notifications/#push-notifications","text":"Push notifications allow an app that isn\u2019t running in the foreground to notify the user when it has information for them. Push notifications originate from a notification server and are pushed to your app on a user\u2019s device.","title":"Push notifications"},{"location":"push-notifications/#setup-push-notifications","text":"By default, Numberly handles UIApplicationDelegate and UNUserNotificationCenterDelegate notifications related methods and forward them to your original delegate. You can disable this auto integration by setting the automatic_integration value to false in your Numberly.plist . If you do so, you will be in charge of implementing notification-related delegate methods .","title":"Setup Push Notifications"},{"location":"push-notifications/#enabling-push-notifications","text":"By default, Numberly will register for push notifications each time your app launches. You can disable this auto integration by setting the automatic_notification_registration value to false in your Numberly.plist . If you do so, you will be in charge of enabling push notifications in an other suitable moment in the user journey. Swift Objective-C Numberly . push . registerForRemoteNotifications ( options : [. alert , . sound , . badge ]) { ( granted ) in // } [ Numberly . push registerForRemoteNotifications : @[@( NBLPushAuthorizationOptionAlert ) , @( NBLPushAuthorizationOptionSound ) , @( NBLPushAuthorizationOptionBadge )] completionHandler : ^ ( BOOL granted ) { // }]; Tip Make sure to enable push notifications each time your app launches to keep the token up to date.","title":"Enabling Push Notifications"},{"location":"push-notifications/#listening-to-push-related-events","text":"The Push module offers some great helpers and callbacks, you just need to set it's delegate which implements the PushDelegate protocol. Swift Objective-C Numberly . push . delegate = self Numberly . push . delegate = self ;","title":"Listening to push related events"},{"location":"push-notifications/#advanced-integration","text":"","title":"Advanced integration"},{"location":"push-notifications/#reset-the-badge-number","text":"You can reset the badge number within your application by calling this method: Swift Objective-C Numberly . push . clearBadge () Numberly . push . delegate = self ;","title":"Reset the badge number"},{"location":"push-notifications/#handling-notification-related-delegates-methods-manually","text":"First set the UNUserNotificationCenter delegate: Swift Objective-C func application ( _ application : UIApplication , willFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]? = nil ) -> Bool { UNUserNotificationCenter . current (). delegate = self return true } - ( BOOL ) application: ( UIApplication * ) application willFinishLaunchingWithOptions :( NSDictionary * ) launchOptions { UNUserNotificationCenter . currentNotificationCenter . delegate = self ; return YES ; } Then, implement the delegates methods: Swift Objective-C func application ( _ application : UIApplication , didRegisterForRemoteNotificationsWithDeviceToken deviceToken : Data ) { Numberly . push . register ( token : deviceToken ) } func userNotificationCenter ( _ center : UNUserNotificationCenter , willPresent notification : UNNotification , withCompletionHandler completionHandler : @ escaping ( UNNotificationPresentationOptions ) -> Void ) { completionHandler ( Numberly . push . presentationOptions ( notification : notification )) } func userNotificationCenter ( _ center : UNUserNotificationCenter , didReceive response : UNNotificationResponse , withCompletionHandler completionHandler : @ escaping () -> Void ) { Numberly . push . handleNotification ( response : response ) completionHandler () } - ( void ) application: ( UIApplication * ) application didRegisterForRemoteNotificationsWithDeviceToken :( NSData * ) deviceToken { [ Numberly . push registerPushToken : deviceToken ]; } - ( void ) userNotificationCenter: ( UNUserNotificationCenter * ) center willPresentNotification :( UNNotification * ) notification withCompletionHandler :( void ( ^ )( UNNotificationPresentationOptions )) completionHandler { completionHandler ([ Numberly . push presentationOptionsForNotification : notification ]); } - ( void ) userNotificationCenter: ( UNUserNotificationCenter * ) center didReceiveNotificationResponse :( UNNotificationResponse * ) response withCompletionHandler :( void ( ^ )( void )) completionHandler { [ Numberly . push handleNotificationResponse : response ]; completionHandler (); }","title":"Handling notification-related delegates methods manually"},{"location":"migration-guides/1-1_to_1-2/","text":"Migration guide from 1.1 to 1.2 \u00b6 This guide will help you migrate from the 1.1 version to the 1.2. Requirements \u00b6 iOS minimum version \u00b6 Numberly 1.2 requires iOS 10.0 or higher. XCode version \u00b6 Numberly 1.2 requires XCode 12 or higher. Setup Instructions \u00b6 Starting from this 1.2, the iOS SDK is a distributed as standard xcframework . 1. Remove previous integration \u00b6 Remove the NumberlyCore.framework and NumberlyPush.framework from your project. When asked what to do with the deletion, pick Move To Trash . Xcode will automatically removed them from the Link Binary With Libraries and Embed Frameworks build steps. From your app's target Build Phases , find the Run Script which contains the following snippet and delete it bash \" ${ BUILT_PRODUCTS_DIR } / ${ FRAMEWORKS_FOLDER_PATH } /Numberly.framework/strip-frameworks.sh\" Grea! Let's install the 1.2 version. 2. Install the new version \u00b6 The 1.2 version can be installed using CocoaPods or manually. Please follow the installation guide before continuing the migration. 3. Add the configuration file \u00b6 Add the Numberly.plist as explained here . Important You should set both automatic_integration and automatic_notification_registration properties to false . 4. Start the SDK \u00b6 As from the 1.2 version, Numberly SDK must be started in the AppDelegate's application:didFinishLaunchingWithOptions: method: Swift Objective-C import Numberly func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) -> Bool { Numberly . start () ... } @import Numberly ; - ( BOOL ) application: ( UIApplication * ) application didFinishLaunchingWithOptions :( NSDictionary * ) launchOptions { [ Numberly start ]; ... } Push Notifications \u00b6 Enabling Push Notifications \u00b6 The registerForRemoteNotifications: method signature has changed. Now it has a completionHandler . The completionHandler is nullable and the default value is nil . If your app is in Swift no change is needed. But if you are using Objective-C you should update the call: Objective-C [ Numberly . push registerForRemoteNotifications : @[@( NBLPushAuthorizationOptionAlert ) , @( NBLPushAuthorizationOptionSound ) , @( NBLPushAuthorizationOptionBadge )] completionHandler : ^ ( BOOL granted ) { // }];","title":"From 1.1 to 1.2"},{"location":"migration-guides/1-1_to_1-2/#migration-guide-from-11-to-12","text":"This guide will help you migrate from the 1.1 version to the 1.2.","title":"Migration guide from 1.1 to 1.2"},{"location":"migration-guides/1-1_to_1-2/#requirements","text":"","title":"Requirements"},{"location":"migration-guides/1-1_to_1-2/#ios-minimum-version","text":"Numberly 1.2 requires iOS 10.0 or higher.","title":"iOS minimum version"},{"location":"migration-guides/1-1_to_1-2/#xcode-version","text":"Numberly 1.2 requires XCode 12 or higher.","title":"XCode version"},{"location":"migration-guides/1-1_to_1-2/#setup-instructions","text":"Starting from this 1.2, the iOS SDK is a distributed as standard xcframework .","title":"Setup Instructions"},{"location":"migration-guides/1-1_to_1-2/#1-remove-previous-integration","text":"Remove the NumberlyCore.framework and NumberlyPush.framework from your project. When asked what to do with the deletion, pick Move To Trash . Xcode will automatically removed them from the Link Binary With Libraries and Embed Frameworks build steps. From your app's target Build Phases , find the Run Script which contains the following snippet and delete it bash \" ${ BUILT_PRODUCTS_DIR } / ${ FRAMEWORKS_FOLDER_PATH } /Numberly.framework/strip-frameworks.sh\" Grea! Let's install the 1.2 version.","title":"1. Remove previous integration"},{"location":"migration-guides/1-1_to_1-2/#2-install-the-new-version","text":"The 1.2 version can be installed using CocoaPods or manually. Please follow the installation guide before continuing the migration.","title":"2. Install the new version"},{"location":"migration-guides/1-1_to_1-2/#3-add-the-configuration-file","text":"Add the Numberly.plist as explained here . Important You should set both automatic_integration and automatic_notification_registration properties to false .","title":"3. Add the configuration file"},{"location":"migration-guides/1-1_to_1-2/#4-start-the-sdk","text":"As from the 1.2 version, Numberly SDK must be started in the AppDelegate's application:didFinishLaunchingWithOptions: method: Swift Objective-C import Numberly func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) -> Bool { Numberly . start () ... } @import Numberly ; - ( BOOL ) application: ( UIApplication * ) application didFinishLaunchingWithOptions :( NSDictionary * ) launchOptions { [ Numberly start ]; ... }","title":"4. Start the SDK"},{"location":"migration-guides/1-1_to_1-2/#push-notifications","text":"","title":"Push Notifications"},{"location":"migration-guides/1-1_to_1-2/#enabling-push-notifications","text":"The registerForRemoteNotifications: method signature has changed. Now it has a completionHandler . The completionHandler is nullable and the default value is nil . If your app is in Swift no change is needed. But if you are using Objective-C you should update the call: Objective-C [ Numberly . push registerForRemoteNotifications : @[@( NBLPushAuthorizationOptionAlert ) , @( NBLPushAuthorizationOptionSound ) , @( NBLPushAuthorizationOptionBadge )] completionHandler : ^ ( BOOL granted ) { // }];","title":"Enabling Push Notifications"}]}